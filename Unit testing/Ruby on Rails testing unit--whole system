When you invoke the command 
	$ rails generate controller ...
a test controller is also generated.

For example:

	$ rails generate controller StaticPages home help

generates
    	  
    invoke  test_unit
    create    test/controllers/static_pages_controller_test.rb
    invoke  helper
    create    app/helpers/static_pages_helper.rb
    invoke    test_unit

for testing purposes.

In order to run the tests the command is 

	$ rails test

This will run every test controller available in the code.  If you want to only run one test, that is if you have created multiple other tests, you can use the command

	$ rails test:models

. This command will only run the tests that refers to the tests contained in the folder "program name"/test/models. 

For example a program named sample_app, the file sample_app/test/models/user_test.rb looks like:

	require 'test_helper'

	class UserTest < ActiveSupport::TestCase
		def setup
			@user = User.new(name: "Example User", email: "user@example.com", password: "foobar", password_confirmation: "foobar")
		end

		test "should be valid" do
			assert @user.valid?
		end

		test "name should be present" do
			@user.name = "    "
			assert_not @user.valid?
		end

		test "email should be present" do
			@user.email = "    "
			assert_not @user.valid?
		end

		test "name should not be too long" do
			@user.name = "a" * 51
			assert_not @user.valid?
		end

		test "email should not be too long" do
			@user.email = "a" * 244 + "@example.com"
			assert_not @user.valid?
		end

		test "email validation should accept valid addresses" do
			valid_addresses = %w[user@example.com USER@foo.COM A_US-ER@foo.bar.org first.last@foo.jp alice+bob@baz.cn]
			valid_addresses.each do |valid_address|
				@user.email = valid_address
				assert @user.valid?, "#{valid_address.inspect} should be valid"
			end
		end

		test "email addresses should be unique" do
			duplicate_user = @user.dup
			duplicate_user.email = @user.email.upcase
			@user.save
			assert_not duplicate_user.valid?
		end

		test "email address should be saves as lowercase" do
			mixed_case_email = "Foo@ExAMPle.CoM"
			@user.email = mixed_case_email
			@user.save
			assert_equal mixed_case_email.downcase, @user.reload.email
		end

		test "password should be present (nonblank)" do
			@user.password = @user.password_confirmation = " " * 6
			assert_not @user.valid?
		end 

		test "password should have a minimum length" do
			@user.password = @user.password_confirmation = "a" * 5
			assert_not @user.valid?
		end 	

	end

.  Each of these tests check for something related to the model of the user and only the model of the user.  So when 
	
	$ rails test:model

is invoked only these tests run.  However, when

	$ rails test

is invoked every test in the test sample_app/test folder is run.  With this set up not only can you do tests on single units of the project but test the project as a whole to make sure everything is running correctly together as well as seperately.