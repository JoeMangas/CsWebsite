{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fmodern\fcharset0 CourierNewPSMT;\f4\fmodern\fcharset0 CourierNewPS-ItalicMT;\f5\fmodern\fcharset0 CourierNewPS-BoldMT;
\f6\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red204\green227\blue244;\red255\green255\blue255;
\red132\green0\blue8;\red26\green26\blue26;\red234\green234\blue234;\red0\green0\blue0;\red255\green249\blue207;
\red83\green116\blue151;\red81\green50\blue60;\red93\green108\blue125;\red193\green193\blue193;\red9\green78\blue192;
\red109\green109\blue109;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid102\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 This file outlines unit testing.\
\
\
\pard\pardeftab720\sl599\sa139

\f1\b\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A Guide to Testing Rails Applications\cb1 \
\pard\pardeftab720\sa270

\b0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 This guide covers built-in mechanisms in Rails for testing your application.\cb1 \
\cb3 After reading this guide, you will know:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b\fs32 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Rails testing terminology.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How to write unit, functional, and integration tests for your application.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Other popular testing approaches and plugins.\cb1 \
\pard\pardeftab720\sl573\sa129

\fs44 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \pard\pardeftab720\sl573\sa129
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Chapters\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\fs26 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#why-write-tests-for-your-rails-applications-questionmark"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Why Write Tests for your Rails Applications?}}
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl0
\b \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#introduction-to-testing"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Introduction to Testing\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#rails-sets-up-for-testing-from-the-word-go"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Rails Sets up for Testing from the Word Go}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#the-test-environment"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 The Test Environment}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#rails-meets-minitest"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Rails meets Minitest}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#available-assertions"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Available Assertions}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#rails-specific-assertions"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Rails Specific Assertions}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#a-brief-note-about-test-cases"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 A Brief Note About Test Cases}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#the-rails-test-runner"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 The Rails Test Runner}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\b \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#the-test-database"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 The Test Database\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#maintaining-the-test-database-schema"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Maintaining the test database schema}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#the-low-down-on-fixtures"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 The Low-Down on Fixtures}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\b \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#model-testing"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Model Testing}}
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl0
\b \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#integration-testing"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Integration Testing\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#helpers-available-for-integration-tests"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Helpers Available for Integration Tests}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#implementing-an-integration-test"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Implementing an integration test}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\b \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#functional-tests-for-your-controllers"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Functional Tests for Your Controllers\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#what-to-include-in-your-functional-tests"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 What to include in your Functional Tests}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#available-request-types-for-functional-tests"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Available Request Types for Functional Tests}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-xhr-ajax-requests"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing XHR (AJAX) requests}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#the-three-hashes-of-the-apocalypse"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 The Three Hashes of the Apocalypse}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#instance-variables-available"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Instance Variables Available}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#setting-headers-and-cgi-variables"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Setting Headers and CGI variables}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-flash-notices"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing 
\f2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 flash
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  notices}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#putting-it-together"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Putting it together}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#test-helpers"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Test helpers}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\b \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-routes"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing Routes}}
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl0
\b \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-views"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing Views}}
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl0
\b \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-helpers"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing Helpers}}
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl0
\b \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	10.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-your-mailers"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing Your Mailers\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#keeping-the-postman-in-check"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Keeping the Postman in Check}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#unit-testing"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Unit Testing}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#functional-testing"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Functional Testing}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\b \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	11.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-jobs"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing Jobs\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#a-basic-test-case"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 A Basic Test Case}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls2\ilvl1\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#custom-assertions-and-testing-jobs-inside-other-components"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Custom Assertions And Testing Jobs Inside Other Components}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl359\sa194
\ls2\ilvl0
\b \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	12.	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#additional-testing-resources"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Additional Testing Resources\
}}\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl359\sa194
\ls2\ilvl1
\b0 \cf5 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/testing.html#testing-time-dependent-code"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 Testing Time-Dependent Code}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1 Why Write Tests for your Rails Applications?\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Rails makes it super easy to write your tests. It starts by producing skeleton test code while you are creating your models and controllers.\
By simply running your Rails tests you can ensure your code adheres to the desired functionality even after some major code refactoring.\
Rails tests can also simulate browser requests and thus you can test your application's response without having to test it through your browser.\
\pard\pardeftab720\sl617\sa139

\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2 Introduction to Testing\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Testing support was woven into the Rails fabric from the beginning. It wasn't an "oh! let's bolt on support for running tests because they're new and cool" epiphany.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.1 Rails Sets up for Testing from the Word Go\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Rails creates a 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory for you as soon as you create a Rails project using 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 rails new
\f0\i \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 application_name
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . If you list the contents of this directory then you shall see:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ ls -F test\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 controllers/\'a0\'a0\'a0 helpers/\'a0\'a0\'a0\'a0\'a0\'a0\'a0 mailers/\'a0\'a0\'a0\'a0\'a0\'a0\'a0 test_helper.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 fixtures/\'a0\'a0\'a0\'a0\'a0\'a0 integration/\'a0\'a0\'a0 models/\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 models
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory is meant to hold tests for your models, the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 controllers
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory is meant to hold tests for your controllers and the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 integration
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory is meant to hold tests that involve any number of controllers interacting. There is also a directory for testing your mailers and one for testing view helpers.\
Fixtures are a way of organizing test data; they reside in the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 fixtures
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory.\
The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_helper.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  file holds the default configuration for your tests.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.2 The Test Environment\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 By default, every Rails application has three environments: development, test, and production.\
Each environment's configuration can be modified similarly. In this case, we can modify our test environment by changing the options found in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 config/environments/test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Your tests are run under 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 RAILS_ENV=test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cb1 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.3 Rails meets Minitest\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you remember, we used the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 rails generate model
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  command in the {\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/getting_started.html"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Getting Started with Rails}}guide. We created our first  model, and among other things it created test stubs in the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails generate model article title:string body:text\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0 app/models/article.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0 test/models/article_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0 test/fixtures/articles.yml\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The default test stub in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/models/article_test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  looks like this:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest < ActiveSupport::TestCase\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # test "the truth" do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 #\'a0\'a0 assert true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A line by line examination of this file will help get you oriented to Rails testing code and terminology.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 By requiring this file, 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_helper.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  the default configuration to run our tests is loaded. We will include this with all the tests we write, so any methods added to this file are available to all our tests.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf11 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest < ActiveSupport::TestCase\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  class defines a 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 test case
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  because it inherits from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActiveSupport::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  thus has all the methods available from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActiveSupport::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . Later in this guide, we'll see some of the methods it gives us.\
Any method defined within a class inherited from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Minitest::Test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  (which is the superclass of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActiveSupport::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ) that begins with 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  (case sensitive) is simply called a test. So, methods defined as 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_password
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_valid_password
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  are legal test names and are run automatically when the test case is run.\
Rails also adds a 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  method that takes a test name and a block. It generates a normal 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Minitest::Unit
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  test with method names prefixed with 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . So you don't have to worry about naming the methods, and you can write something like:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "the truth"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Which is approximately the same as writing this:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf11 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 def\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_the_truth\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 However only the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  macro allows a more readable test name. You can still use regular method definitions though.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The method name is generated by replacing spaces with underscores. The result does not need to be a valid Ruby identifier though, the name may contain punctuation characters etc. That's because in Ruby technically any string may be a method name. This may require use of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 define_method
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 send
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  calls to function properly, but formally there's little restriction on the name.\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Next, let's look at our first assertion:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 An assertion is a line of code that evaluates an object (or expression) for expected results. For example, an assertion can check:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 does this value = that value?\cb1 \
\ls3\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 is this object nil?\cb1 \
\ls3\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 does this line of code throw an exception?\cb1 \
\ls3\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 is the user's password greater than 5 characters?\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Every test may contain one or more assertions, with no restriction as to how many assertions are allowed. Only when all the assertions are successful will the test pass.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.3.1 Your first failing test\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 To see how a test failure is reported, you can add a failing test to the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 article_test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  test case.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should not save article without title"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article = Article.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_not article.save\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let us run this newly added test (where 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 6
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is the number of line where the test is defined).\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/models/article_test.rb:6\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: --seed 44656\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 F\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Failure:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest#test_should_not_save_article_without_title [/path/to/blog/test/models/article_test.rb:6]:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Expected true to be nil or false\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 bin/rails test test/models/article_test.rb:6\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\'a0\
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished in 0.023918s, 41.8090 runs/s, 41.8090 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the output, 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 F
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  denotes a failure. You can see the corresponding trace shown under 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Failure
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  along with the name of the failing test. The next few lines contain the stack trace followed by a message that mentions the actual value and the expected value by the assertion. The default assertion messages provide just enough information to help pinpoint the error. To make the assertion failure message more readable, every assertion provides an optional message parameter, as shown here:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should not save article without title"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article = Article.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_not article.save, 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "Saved the article without a title"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Running this test shows the friendlier assertion message:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Failure:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest#test_should_not_save_article_without_title [/path/to/blog/test/models/article_test.rb:6]:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Saved the article without a title\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now to get this test to pass we can add a model level validation for the 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 title
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  field.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf11 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Article < ApplicationRecord\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0validates 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :title
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , presence: \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now the test should pass. Let us verify by running the test again:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/models/article_test.rb:6\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: --seed 31252\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished in 0.027476s, 36.3952 runs/s, 36.3952 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now, if you noticed, we first wrote a test which fails for a desired functionality, then we wrote some code which adds the functionality and finally we ensured that our test passes. This approach to software development is referred to as {\field{\*\fldinst{HYPERLINK "http://c2.com/cgi/wiki?TestDrivenDevelopment"}}{\fldrslt 
\i \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Test-Driven Development
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  (TDD)}}.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.3.2 What an error looks like\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 To see how an error gets reported, here's a test containing an error:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should report error"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # some_undefined_variable is not defined elsewhere in the test case\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0some_undefined_variable\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now you can see even more output in the console from running the tests:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/models/article_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: --seed 1808\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .E\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Error:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticleTest#test_should_report_error:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 NameError: undefined local variable or method `some_undefined_variable' for #<ArticleTest:0x007fee3aa71798>\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0test/models/article_test.rb:11:in `block in <class:ArticleTest>'\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 bin/rails test test/models/article_test.rb:9\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\'a0\
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished in 0.040609s, 49.2500 runs/s, 24.6250 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 2 runs, 1 assertions, 0 failures, 1 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Notice the 'E' in the output. It denotes a test with error.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The execution of each test method stops as soon as any error or an assertion failure is encountered, and the test suite continues with the next method. All test methods are executed in random order. The {\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/configuring.html#configuring-active-support"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 config.active_support.test_order
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  option}} can be used to configure test order.\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 When a test fails you are presented with the corresponding backtrace. By default Rails filters that backtrace and will only print lines relevant to your application. This eliminates the framework noise and helps to focus on your code. However there are situations when you want to see the full backtrace. Simply set the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 -b
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  (or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 --backtrace
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ) argument to enable this behavior:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test -b test/models/article_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If we want this test to pass we can modify it to use 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_raises
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  like so:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should report error"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # some_undefined_variable is not defined elsewhere in the test case\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_raises(NameError) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0some_undefined_variable\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This test should now pass.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.4 Available Assertions\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 By now you've caught a glimpse of some of the assertions that are available. Assertions are the worker bees of testing. They are the ones that actually perform the checks to ensure that things are going as planned.\
Here's an extract of the assertions you can use with {\field{\*\fldinst{HYPERLINK "https://github.com/seattlerb/minitest"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Minitest}}, the default testing library used by Rails. The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 [msg]
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  parameter is an optional string message you can specify to make your test failure messages clearer.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrt\brdrs\brdrw40\brdrcf13 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clcbpat7 \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw40\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clcbpat7 \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw40\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Assertion\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Purpose\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2\b0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert( test, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not( test, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is false.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_equal( expected, actual, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 expected == actual
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_equal( expected, actual, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 expected != actual
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_same( expected, actual, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 expected.equal?(actual)
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_same( expected, actual, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 expected.equal?(actual)
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is false.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_nil( obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj.nil?
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_nil( obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj.nil?
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is false.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_empty( obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 empty?
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_empty( obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is not 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 empty?
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_match( regexp, string, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that a string matches the regular expression.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_no_match( regexp, string, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that a string doesn't match the regular expression.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_includes( collection, obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 collection
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_includes( collection, obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is not in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 collection
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_in_delta( expected, actual, [delta], [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that the numbers 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 expected
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 actual
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  are within 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 delta
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  of each other.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_in_delta( expected, actual, [delta], [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that the numbers 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 expected
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 actual
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  are not within 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 delta
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  of each other.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_throws( symbol, [msg] ) \{ block \}
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that the given block throws the symbol.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_raises( exception1, exception2, ... ) \{ block \}
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that the given block raises one of the given exceptions.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_nothing_raised \{ block \}
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that the given block doesn't raise any exceptions.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_instance_of( class, obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is an instance of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 class
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_instance_of( class, obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is not an instance of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 class
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_kind_of( class, obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is an instance of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 class
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  or is descending from it.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_kind_of( class, obj, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is not an instance of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 class
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and is not descending from it.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_respond_to( obj, symbol, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  responds to 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 symbol
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_respond_to( obj, symbol, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  does not respond to 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 symbol
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_operator( obj1, operator, [obj2], [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj1.operator(obj2)
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_operator( obj1, operator, [obj2], [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj1.operator(obj2)
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is false.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_predicate ( obj, predicate, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj.predicate
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true, e.g. 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_predicate str, :empty?
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_predicate ( obj, predicate, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 obj.predicate
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is false, e.g. 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not_predicate str, :empty?
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_send( array, [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures that executing the method listed in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 array[1]
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  on the object in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 array[0]
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  with the parameters of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 array[2 and up]
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is true, e.g. assert_send [@user, :full_name, 'Sam Smith']. This one is weird eh?\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrb\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth3880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth7820\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 flunk( [msg] )
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Ensures failure. This is useful to explicitly mark a test that isn't finished yet.\cell \lastrow\row
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The above are a subset of assertions that minitest supports. For an exhaustive & more up-to-date list, please check {\field{\*\fldinst{HYPERLINK "http://docs.seattlerb.org/minitest/"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Minitest API documentation}}, specifically {\field{\*\fldinst{HYPERLINK "http://docs.seattlerb.org/minitest/Minitest/Assertions.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Minitest::Assertions}}.\
Because of the modular nature of the testing framework, it is possible to create your own assertions. In fact, that's exactly what Rails does. It includes some specialized assertions to make your life easier.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Creating your own assertions is an advanced topic that we won't cover in this tutorial.\cb1 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.5 Rails Specific Assertions\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Rails adds some custom assertions of its own to the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 minitest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  framework:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrt\brdrs\brdrw40\brdrcf13 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clcbpat7 \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw40\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clcbpat7 \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw40\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Assertion\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Purpose\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference"}}{\fldrslt 
\f2\b0 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 assert_difference(expressions, difference = 1, message = nil) \{...\}}}
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Test numeric difference between the return value of an expression as a result of what is evaluated in the yielded block.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 assert_no_difference(expressions, message = nil, &block)}}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Asserts that the numeric result of evaluating an expression is not changed before and after invoking the passed in block.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 assert_recognizes(expected_options, path, extras=\{\}, message=nil)}}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Asserts that the routing of the given path was handled correctly and that the parsed options (given in the expected_options hash) match path. Basically, it asserts that Rails recognizes the route given by expected_options.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 assert_generates(expected_path, options, defaults=\{\}, extras = \{\}, message=nil)}}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Asserts that the provided options can be used to generate the provided path. This is the inverse of assert_recognizes. The extras parameter is used to tell the request the names and values of additional request parameters that would be in a query string. The message parameter allows you to specify a custom error message for assertion failures.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 assert_response(type, message = nil)}}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Asserts that the response comes with a specific status code. You can specify 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :success
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  to indicate 200-299, 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :redirect
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 to indicate 300-399, 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :missing
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  to indicate 404, or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :error
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  to match the 500-599 range. You can also pass an explicit status number or its symbolic equivalent. For more information, see {\field{\*\fldinst{HYPERLINK "http://rubydoc.info/github/rack/rack/master/Rack/Utils#HTTP_STATUS_CODES-constant"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 full list of status codes}} and how their {\field{\*\fldinst{HYPERLINK "http://rubydoc.info/github/rack/rack/master/Rack/Utils#SYMBOL_TO_STATUS_CODE-constant"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 mapping}} works.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrb\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth5920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth5940\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420
{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 assert_redirected_to(options = \{\}, message=nil)}}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Asserts that the redirection options passed in match those of the redirect called in the latest action. This match can be partial, such that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_redirected_to(controller: "weblog")
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  will also match the redirection of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 redirect_to(controller: "weblog", action: "show")
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and so on. You can also pass named routes such as 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_redirected_to root_path
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and Active Record objects such as 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_redirected_to @article
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cell \lastrow\row
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You'll see the usage of some of these assertions in the next chapter.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.6 A Brief Note About Test Cases\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 All the basic assertions such as 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_equal
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  defined in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Minitest::Assertions
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  are also available in the classes we use in our own test cases. In fact, Rails provides the following classes for you to inherit from:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls4\ilvl0
\f2 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveSupport/TestCase.html"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 ActiveSupport::TestCase}}
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls4\ilvl0
\f2 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionMailer/TestCase.html"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 ActionMailer::TestCase}}
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls4\ilvl0
\f2 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionView/TestCase.html"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 ActionView::TestCase}}
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls4\ilvl0
\f2 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/IntegrationTest.html"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 ActionDispatch::IntegrationTest}}
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls4\ilvl0
\f2 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}{\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveJob/TestCase.html"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec5 ActiveJob::TestCase}}
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Each of these classes include 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Minitest::Assertions
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , allowing us to use all of the basic assertions in our tests.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For more information on 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Minitest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , refer to {\field{\*\fldinst{HYPERLINK "http://docs.seattlerb.org/minitest"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 its documentation}}.\cb1 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2.7 The Rails Test Runner\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 We can run all of our tests at once by using the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 bin/rails test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  command.\
Or we can run a single test by passing the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 bin/rails test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  command the filename containing the test cases.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/models/article_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: --seed 1559\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ..\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished in 0.027034s, 73.9810 runs/s, 110.9715 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 2 runs, 3 assertions, 0 failures, 0 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This will run all test methods from the test case.\
You can also run a particular test method from the test case by providing the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 -n
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 --name
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  flag and the test's method name.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/models/article_test.rb -n test_the_truth\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: -n test_the_truth --seed 43583\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished tests in 0.009064s, 110.3266 tests/s, 110.3266 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 1 tests, 1 assertions, 0 failures, 0 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can also run a test at a specific line by providing the line number.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/models/article_test.rb:6 # run specific test and line\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can also run an entire directory of tests by providing the path to the directory.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/controllers # run all tests from specific directory\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The test runner provides lot of other features too like failing fast, deferring test output at the end of test run and so on. Check the documentation of the test runner as follows:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test -h\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 minitest options:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-h, --help\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Display this help.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-s, --seed SEED\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Sets random seed. Also via env. Eg: SEED=n rake\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-v, --verbose\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Verbose. Show progress processing files.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-n, --name PATTERN\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Filter run on /regexp/ or string.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0--exclude PATTERN\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Exclude /regexp/ or string from run.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Known extensions: rails, pride\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Usage: bin/rails test [options] [files or directories]\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 You can run a single test by appending a line number to a filename:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0bin/rails test test/models/user_test.rb:27\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 You can run multiple files and directories at the same time:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0bin/rails test test/controllers test/integration/login_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 By default test failures and errors are reported inline during a run.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Rails options:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-e, --environment ENV\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Run tests in the ENV environment\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-b, --backtrace\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Show the complete backtrace\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-d, --defer-output\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Output test failures and errors after the test run\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-f, --fail-fast\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Abort test run on first failure or error\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0-c, --[no-]color\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Enable color in the output\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 3 The Test Database\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Just about every Rails application interacts heavily with a database and, as a result, your tests will need a database to interact with as well. To write efficient tests, you'll need to understand how to set up this database and populate it with sample data.\
By default, every Rails application has three environments: development, test, and production. The database for each one of them is configured in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 config/database.yml
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\
A dedicated test database allows you to set up and interact with test data in isolation. This way your tests can mangle test data with confidence, without worrying about the data in the development or production databases.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.1 Maintaining the test database schema\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In order to run your tests, your test database will need to have the current structure. The test helper checks whether your test database has any pending migrations. It will try to load your 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 db/schema.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 db/structure.sql
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  into the test database. If migrations are still pending, an error will be raised. Usually this indicates that your schema is not fully migrated. Running the migrations against the development database (
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 bin/rails db:migrate
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ) will bring the schema up to date.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If there were modifications to existing migrations, the test database needs to be rebuilt. This can be done by executing 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 bin/rails db:test:prepare
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\cb1 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.2 The Low-Down on Fixtures\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For good tests, you'll need to give some thought to setting up test data. In Rails, you can handle this by defining and customizing fixtures. You can find comprehensive documentation in the {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Fixtures API documentation}}.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.2.1 What Are Fixtures?\
\pard\pardeftab720\sa420

\i\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Fixtures
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  is a fancy word for sample data. Fixtures allow you to populate your testing database with predefined data before your tests run. Fixtures are database independent and written in YAML. There is one file per model.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Fixtures are not designed to create every object that your tests need, and are best managed when only used for default data that can be applied to the common case.\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You'll find fixtures under your 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/fixtures
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory. When you run 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 rails generate model
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 to create a new model, Rails automatically creates fixture stubs in this directory.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.2.2 YAML\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 YAML-formatted fixtures are a human-friendly way to describe your sample data. These types of fixtures have the 
\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .yml
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  file extension (as in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 users.yml
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ).\
Here's a sample YAML fixture file:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # lo & behold! I am a YAML comment!\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 david:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0name: David Heinemeier Hansson\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0birthday: 1979-10-15\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0profession: Systems development\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 steve:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0name: Steve Ross Kellock\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0birthday: 1974-09-27\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0profession: guy with keyboard\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Each fixture is given a name followed by an indented list of colon-separated key/value pairs. Records are typically separated by a blank line. You can place comments in a fixture file by using the # character in the first column.\
If you are working with {\field{\*\fldinst{HYPERLINK "http://guides.rubyonrails.org/association_basics.html"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 associations}}, you can simply define a reference node between two different fixtures. Here's an example with a 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 belongs_to
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 has_many
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  association:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # In fixtures/categories.yml\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 about:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0name: About\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # In fixtures/articles.yml\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 first:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0title: Welcome to Rails!\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0body: Hello world!\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0category: about\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Notice the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 category
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  key of the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 first
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  article found in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 fixtures/articles.yml
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  has a value of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 about
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . This tells Rails to load the category 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 about
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  found in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 fixtures/categories.yml
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For associations to reference one another by name, you can use the fixture name instead of specifying the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 id:
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  attribute on the associated fixtures. Rails will auto assign a primary key to be consistent between runs. For more information on this association behavior please read the {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 Fixtures API documentation}}.\cb1 \
\pard\pardeftab720\sl420\sa140

\b \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.2.3 ERB'in It Up\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ERB allows you to embed Ruby code within templates. The YAML fixture format is pre-processed with ERB when Rails loads fixtures. This allows you to use Ruby to help you generate some sample data. For example, the following code generates a thousand users:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 <%\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 1000\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .times \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 |n| %>\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 user_<%=\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 n %>:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0username: <%=\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "user#\{n\}"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 %>\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0email: <%=\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "user#\{n\}@example.com"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 %>\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 <%\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 %>\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl420\sa140

\f0\b \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 3.2.4 Fixtures in Action\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Rails automatically loads all fixtures from the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/fixtures
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory by default. Loading involves three steps:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Remove any existing data from the table corresponding to the fixture\cb1 \
\ls5\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Load the fixture data into the table\cb1 \
\ls5\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Dump the fixture data into a method in case you want to access it directly\cb1 \
\pard\pardeftab720\sa280
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In order to remove existing data from the database, Rails tries to disable referential integrity triggers (like foreign keys and check constraints). If you are getting annoying permission errors on running tests, make sure the database user has privilege to disable these triggers in testing environment. (In PostgreSQL, only superusers can disable all triggers. Read more about PostgreSQL permissions {\field{\*\fldinst{HYPERLINK "http://blog.endpoint.com/2012/10/postgres-system-triggers-error.html"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 here}}).\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl420\sa140

\b \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 3.2.5 Fixtures are Active Record objects\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Fixtures are instances of Active Record. As mentioned in point #3 above, you can access the object directly because it is automatically available as a method whose scope is local of the test case. For example:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf12 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # this will return the User object for the fixture named david\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 users(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :david
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # this will return the property for david called id\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 users(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :david
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ).id\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # one can also access methods available on the User class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 david = users(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :david
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 david.call(david.partner)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To get multiple fixtures at once, you can pass in a list of fixture names. For example:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf12 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # this will return an array containing the fixtures david and steve\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 users(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :david
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 , 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :steve
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 4 Model Testing\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Model tests are used to test the various models of your application.\
Rails model tests are stored under the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/models
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory. Rails provides a generator to create a model test skeleton for you.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails generate test_unit:model article title:string body:text\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0 test/models/article_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0 test/fixtures/articles.yml\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Model tests don't have their own superclass like 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionMailer::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  instead they inherit from {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveSupport/TestCase.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 ActiveSupport::TestCase}}.\
\pard\pardeftab720\sl617\sa139

\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5 Integration Testing\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Integration tests are used to test how various parts of your application interact. They are generally used to test important workflows within our application.\
For creating Rails integration tests, we use the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/integration
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory for our application. Rails provides a generator to create an integration test skeleton for us.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails generate integration_test user_flows\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0exists\'a0 test/integration/\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0create\'a0 test/integration/user_flows_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Here's what a freshly-generated integration test looks like:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserFlowsTest < ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # test "the truth" do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 #\'a0\'a0 assert true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Here the test is inheriting from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionDispatch::IntegrationTest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . This makes some additional helpers available for us to use in our integration tests.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5.1 Helpers Available for Integration Tests\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In addition to the standard testing helpers, inheriting from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionDispatch::IntegrationTest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 comes with some additional helpers available when writing integration tests. Let's get briefly introduced to the three categories of helpers we get to choose from.\
For dealing with the integration test runner, see {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Integration/Runner.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 ActionDispatch::Integration::Runner}}.\
When performing requests, we will have {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Integration/RequestHelpers.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 ActionDispatch::Integration::RequestHelpers}}available for our use.\
If we need to modify the session, or state of our integration test, take a look at {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Integration/Session.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 ActionDispatch::Integration::Session}} to help.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5.2 Implementing an integration test\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Let's add an integration test to our blog application. We'll start with a basic workflow of creating a new blog article, to verify that everything is working properly.\
We'll start by generating our integration test skeleton:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails generate integration_test blog_flow\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It should have created a test file placeholder for us. With the output of the previous command we should see:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 invoke\'a0 test_unit\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0\'a0\'a0 test/integration/blog_flow_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now let's open that file and write our first assertion:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 BlogFlowTest < ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "can see the welcome page"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0get 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "/"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "h1"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "Welcome#index"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We will take a look at 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  to query the resulting HTML of a request in the "Testing Views" section below. It is used for testing the response of our request by asserting the presence of key HTML elements and their content.\
When we visit our root path, we should see 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 welcome/index.html.erb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  rendered for the view. So this assertion should pass.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5.2.1 Creating articles integration\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 How about testing our ability to create a new article in our blog and see the resulting article.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "can create an article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0get 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "/articles/new"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :success
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0post 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "/articles"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ,\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0params: \{ article: \{ title: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "can create"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , body: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "article successfully."
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \} \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :redirect
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0follow_redirect!\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :success
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "p"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "Title:\\n\'a0 can create"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's break this test down so we can understand it.\
We start by calling the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :new
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  action on our Articles controller. This response should be successful.\
After this we make a post request to the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :create
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  action of our Articles controller:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 post 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "/articles"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ,\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0params: \{ article: \{ title: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "can create"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , body: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "article successfully."
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \} \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :redirect
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 follow_redirect!\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The two lines following the request are to handle the redirect we setup when creating a new article.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Don't forget to call 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 follow_redirect!
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  if you plan to make subsequent requests after a redirect is made.\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Finally we can assert that our response was successful and our new article is readable on the page.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 5.2.2 Taking it further\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 We were able to successfully test a very small workflow for visiting our blog and creating a new article. If we wanted to take this further we could add tests for commenting, removing articles, or editing comments. Integration tests are a great place to experiment with all kinds of use-cases for our applications.\
\pard\pardeftab720\sl617\sa139

\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6 Functional Tests for Your Controllers\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In Rails, testing the various actions of a controller is a form of writing functional tests. Remember your controllers handle the incoming web requests to your application and eventually respond with a rendered view. When writing functional tests, you are testing how your actions handle the requests and the expected result or response, in some cases an HTML view.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.1 What to include in your Functional Tests\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You should test for things such as:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 was the web request successful?\cb1 \
\ls6\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 was the user redirected to the right page?\cb1 \
\ls6\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 was the user successfully authenticated?\cb1 \
\ls6\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 was the correct object stored in the response template?\cb1 \
\ls6\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 was the appropriate message displayed to the user in the view?\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The easiest way to see functional tests in action is to generate a controller using the scaffold generator:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails generate scaffold_controller article title:string body:text\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0 app/controllers/articles_controller.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 invoke\'a0 test_unit\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\'a0\'a0\'a0 test/controllers/articles_controller_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This will generate the controller code and tests for an 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Article
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  resource. You can take a look at the file 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 articles_controller_test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  in the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/controllers
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory.\
If you already have a controller and just want to generate the test scaffold code for each of the seven default actions, you can use the following command:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails generate test_unit:scaffold article\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 invoke\'a0 test_unit\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create test/controllers/articles_controller_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ...\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's take a look at one such test, 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_should_get_index
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  from the file 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 articles_controller_test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf12 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # articles_controller_test.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticlesControllerTest < ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should get index"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0get articles_url\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :success
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_should_get_index
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  test, Rails simulates a request on the action called 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 index
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , making sure the request was successful and also ensuring that the right response body has been generated.\
The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  method kicks off the web request and populates the results into the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 @response
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 . It can accept up to 6 arguments:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa420
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The URI of the controller action you are requesting. This can be in the form of a string or a route helper (e.g. 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 articles_url
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ).\cb1 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa420
\ls7\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 params
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 : option with a hash of request parameters to pass into the action (e.g. query string parameters or article variables).\cb1 \uc0\u8232 \
\ls7\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 headers
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 : for setting the headers that will be passed with the request.\cb1 \uc0\u8232 \
\ls7\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 env
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 : for customizing the request environment as needed.\cb1 \uc0\u8232 \
\ls7\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 xhr
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 : whether the request is Ajax request or not. Can be set to true for marking the request as Ajax.\cb1 \uc0\u8232 \
\ls7\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 as
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 : for encoding the request with different content type. Supports 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :json
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  by default.\cb1 \uc0\u8232 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 All of these keyword arguments are optional.\
Example: Calling the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :show
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  action, passing an 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 id
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  of 12 as the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 params
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and setting 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 HTTP_REFERER
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 header:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get article_url, params: \{ id: \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 12\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \}, headers: \{ 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "HTTP_REFERER"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 => 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "http://example.com/home"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Another example: Calling the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :update
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  action, passing an 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 id
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  of 12 as the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 params
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  as an Ajax request.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 patch article_url, params: \{ id: \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 12\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \}, xhr: \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa280

\f0 \cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you try running 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_should_create_article
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  test from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 articles_controller_test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  it will fail on account of the newly added model level validation and rightly so.\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Let us modify 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_should_create_article
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  test in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 articles_controller_test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  so that all our test pass:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should create article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_difference(
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Article.count'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0post articles_url, params: \{ article: \{ body: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Rails is awesome!'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , title: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Hello Rails'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \} \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_redirected_to article_path(Article.last)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now you can try running all the tests and they should pass.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.2 Available Request Types for Functional Tests\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you're familiar with the HTTP protocol, you'll know that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is a type of request. There are 6 request types supported in Rails functional tests:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls8\ilvl0
\f2 \cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls8\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 post
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls8\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 patch
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls8\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 put
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls8\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 head
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls8\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 delete
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 All of request types have equivalent methods that you can use. In a typical C.R.U.D. application you'll be using 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 post
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 put
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 delete
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  more often.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Functional tests do not verify whether the specified request type is accepted by the action, we're more concerned with the result. Request tests exist for this use case to make your tests more purposeful.\cb1 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.3 Testing XHR (AJAX) requests\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 To test AJAX requests, you can specify the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 xhr: true
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  option to 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 post
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 patch
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 put
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 delete
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  methods. For example:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "ajax request"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article = articles(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :one
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0get article_url(article), xhr: \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 true\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'hello world'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @response
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .body\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "text/javascript"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @response
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .content_type\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl432\sa139

\f0\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 6.4 The Three Hashes of the Apocalypse\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 After a request has been made and processed, you will have 3 Hash objects ready for use:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls9\ilvl0
\f2 \cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 cookies
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  - Any cookies that are set\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls9\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 flash
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  - Any objects living in the flash\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls9\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 session
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  - Any object living in session variables\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 As is the case with normal Hash objects, you can access the values by referencing the keys by string. You can also reference them by symbol name. For example:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 flash[
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "gordon"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ]\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 flash[
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :gordon
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ]\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 session[
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "shmession"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ]\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 session[
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :shmession
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ]\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 cookies[
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "are_good_for_u"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ]\'a0\'a0\'a0\'a0 cookies[
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :are_good_for_u
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ]\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl432\sa139

\f0\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 6.5 Instance Variables Available\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You also have access to three instance variables in your functional tests:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls10\ilvl0
\f2 \cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 @controller
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  - The controller processing the request\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls10\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 @request
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  - The request object\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\ls10\ilvl0
\f2 \cf6 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 @response
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  - The response object\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.6 Setting Headers and CGI variables\
\pard\pardeftab720\sa420
{\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/search/rfc2616#section-5.3"}}{\fldrslt 
\b0\fs28 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 HTTP headers}}
\b0\fs28 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  and {\field{\*\fldinst{HYPERLINK "http://tools.ietf.org/search/rfc3875#section-4.1"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 CGI variables}} can be passed as headers:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf12 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # setting an HTTP Header\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get articles_url, headers: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "Content-Type"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 => 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "text/plain"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # simulate the request with custom header\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # setting a CGI variable\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 get articles_url, headers: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "HTTP_REFERER"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 => 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "http://example.com/home"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # simulate the request with custom env variable\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl432\sa139

\f0\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 6.7 Testing 
\f6 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 flash
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  notices\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you remember from earlier, one of the Three Hashes of the Apocalypse was 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 flash
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\
We want to add a 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 flash
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  message to our blog application whenever someone successfully creates a new Article.\
Let's start by adding this assertion to our 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test_should_create_article
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  test:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should create article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_difference(
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Article.count'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0post article_url, params: \{ article: \{ title: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Some title'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \} \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_redirected_to article_path(Article.last)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Article was successfully created.'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , flash[
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :notice
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ]\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If we run our test now, we should see a failure:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/controllers/articles_controller_test.rb -n test_should_create_article\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: -n test_should_create_article --seed 32266\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 F\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished in 0.114870s, 8.7055 runs/s, 34.8220 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a01) Failure:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticlesControllerTest#test_should_create_article [/test/controllers/articles_controller_test.rb:16]:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 --- expected\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 +++ actual\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 @@ -1 +1 @@\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 -"Article was successfully created."\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 +nil\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 1 runs, 4 assertions, 1 failures, 0 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Let's implement the flash message now in our controller. Our 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :create
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  action should now look like this:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf11 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 def\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 create\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 = Article.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (article_params)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 if\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  
\f5\b \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .save\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0flash[
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :notice
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ] = 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Article was successfully created.'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0redirect_to 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 else\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0render 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'new'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now if we run our tests, we should see it pass:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 $ bin/rails test test/controllers/articles_controller_test.rb -n test_should_create_article\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Run options: -n test_should_create_article --seed 18981\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 # Running:\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Finished in 0.081972s, 12.1993 runs/s, 48.7972 assertions/s.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 1 runs, 4 assertions, 0 failures, 0 errors, 0 skips\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl432\sa139

\f0\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 6.8 Putting it together\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 At this point our Articles controller tests the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :index
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  as well as 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :new
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :create
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  actions. What about dealing with existing data?\
Let's write a test for the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :show
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  action:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should show article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article = articles(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :one
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0get article_url(article)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :success
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Remember from our discussion earlier on fixtures, the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 articles()
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  method will give us access to our Articles fixtures.\
How about deleting an existing Article?\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should destroy article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article = articles(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :one
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_difference(
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Article.count'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , -\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 1\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0delete article_url(article)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_redirected_to articles_path\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We can also add a test for updating an existing Article.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should update article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article = articles(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :one
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0patch article_url(article), params: \{ article: \{ title: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "updated"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \} \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_redirected_to article_path(article)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Reload association to fetch updated data and assert that title is updated.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0article.reload\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "updated"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , article.title\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Notice we're starting to see some duplication in these three tests, they both access the same Article fixture data. We can D.R.Y. this up by using the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 setup
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 teardown
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  methods provided by 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActiveSupport::Callbacks
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\
Our test should now look something as what follows. Disregard the other tests for now, we're leaving them out for brevity.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ArticlesControllerTest < ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # called before every single test\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0setup \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 = articles(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :one
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # called after every single test\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0teardown \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # when controller is using cache it may be a good idea to reset it afterwards\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0Rails.cache.clear\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should show article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Reuse the @article instance variable from setup\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0get article_url(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :success
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should destroy article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_difference(
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Article.count'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , -\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 1\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0delete article_url(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_redirected_to articles_path\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should update article"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0patch article_url(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 ), params: \{ article: \{ title: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "updated"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \} \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_redirected_to article_path(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Reload association to fetch updated data and assert that title is updated.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .reload\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "updated"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @article
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .title\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Similar to other callbacks in Rails, the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 setup
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 teardown
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  methods can also be used by passing a block, lambda, or method name as a symbol to call.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6.9 Test helpers\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 To avoid code duplication, you can add your own test helpers. Sign in helper can be a good example:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf12 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 #test/test_helper.rb\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 module\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 SignInHelper\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 def\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 sign_in_as(user)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0post sign_in_url(email: user.email, password: user.password)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0include SignInHelper\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ProfileControllerTest < ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should show profile"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # helper is now reusable from any controller test case\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0sign_in_as users(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :david
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0get profile_url\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_response 
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :success
\f3\b0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 7 Testing Routes\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Like everything else in your Rails application, you can test your routes.\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If your application has complex routes, Rails provides a number of useful helpers to test them.\cb1 \
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For more information on routing assertions available in Rails, see the API documentation for {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 ActionDispatch::Assertions::RoutingAssertions}}.\
\pard\pardeftab720\sl617\sa139

\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 8 Testing Views\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Testing the response to your request by asserting the presence of key HTML elements and their content is a common way to test the views of your application. Like route tests, view tests reside in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/controllers/
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  or are part of controller tests. The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  method allows you to query HTML elements of the response by using a simple yet powerful syntax.\
There are two forms of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 :\
\pard\pardeftab720\sl420\sa420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select(selector, [equality], [message])
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  ensures that the equality condition is met on the selected elements through the selector. The selector may be a CSS selector expression (String) or an expression with substitution values.\

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select(element, selector, [equality], [message])
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  ensures that the equality condition is met on all the selected elements through the selector starting from the 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 element
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  (instance of 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Nokogiri::XML::Node
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Nokogiri::XML::NodeSet
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ) and its descendants.\
\pard\pardeftab720\sa420
\cf2 For example, you could verify the contents on the title element in your response with:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'title'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "Welcome to Rails Testing Guide"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can also use nested 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  blocks for deeper investigation.\
In the following example, the inner 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  for 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 li.menu_item
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  runs within the collection of elements selected by the outer block:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'ul.navigation'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'li.menu_item'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A collection of selected elements may be iterated through so that 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  may be called separately for each element.\
For example if the response contains two ordered lists, each with four nested list elements then the following tests will both pass.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "ol"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 |elements|\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0elements.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 each\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 |element|\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_select element, 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "li"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 4\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "ol"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "li"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 8\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This assertion is quite powerful. For more advanced usage, refer to its {\field{\*\fldinst{HYPERLINK "https://github.com/rails/rails-dom-testing/blob/master/lib/rails/dom/testing/assertions/selector_assertions.rb"}}{\fldrslt \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 documentation}}.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 8.1 Additional View-Based Assertions\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 There are more assertions that are primarily used in testing views:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrt\brdrs\brdrw40\brdrcf13 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clcbpat7 \clwWidth6920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw40\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clcbpat7 \clwWidth4780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw40\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\b \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Assertion\cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Purpose\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth6920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2\b0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select_email
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Allows you to make assertions on the body of an e-mail.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth6920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select_encoded
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Allows you to make assertions on encoded HTML. It does this by un-encoding the contents of each element and then calling the block with all the un-encoded elements.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat4 \tamarb420 \trbrdrl\brdrs\brdrw40\brdrcf13 \trbrdrb\brdrs\brdrw40\brdrcf13 \trbrdrr\brdrs\brdrw40\brdrcf13 
\clvertalc \clshdrawnil \clwWidth6920\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth4780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf13 \clbrdrl\brdrs\brdrw20\brdrcf13 \clbrdrb\brdrs\brdrw20\brdrcf13 \clbrdrr\brdrs\brdrw20\brdrcf13 \clpadt180 \clpadl200 \clpadb180 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl420

\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 css_select(selector)
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 css_select(element, selector)
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \cell 
\pard\intbl\itap1\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Returns an array of all the elements selected by the 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 selector
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 . In the second variant it first matches the base 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 element
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  and tries to match the 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 selector
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  expression on any of its children. If there are no matches both variants return an empty array.\cell \lastrow\row
\pard\pardeftab720\sa420
\cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Here's an example of using 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select_email
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 :\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_select_email \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_select 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'small'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Please click the "Unsubscribe" link if you want to opt-out.'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 9 Testing Helpers\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 A helper is just a simple module where you can define methods which are available into your views.\
In order to test helpers, all you need to do is check that the output of the helper method matches what you'd expect. Tests related to the helpers are located under the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/helpers
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory.\
Given we have the following helper:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf11 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 module\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserHelper\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 def\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 link_to_user(user)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0link_to 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "#\{user.first_name\} #\{user.last_name\}"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , user\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We can test the output of this method like this:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf11 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserHelperTest < ActionView::TestCase\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "should return the user's full name"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0user = users(
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 :david
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 )\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_dom_equal %\{<a href=
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "/user/#\{user.id\}"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 >David Heinemeier Hansson</a>\}, link_to_user(user)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Moreover, since the test class extends from 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionView::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , you have access to Rails' helper methods such as 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 link_to
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  or 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 pluralize
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 .\
\pard\pardeftab720\sl617\sa139

\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10 Testing Your Mailers\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Testing mailer classes requires some specific tools to do a thorough job.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.1 Keeping the Postman in Check\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Your mailer classes - like every other part of your Rails application - should be tested to ensure that they are working as expected.\
The goals of testing your mailer classes are to ensure that:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls11\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 emails are being processed (created and sent)\cb1 \
\ls11\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 the email content is correct (subject, sender, body, etc)\cb1 \
\ls11\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 the right emails are being sent at the right times\cb1 \
\pard\pardeftab720\sl420\sa140

\b \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.1.1 From All Sides\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 There are two aspects of testing your mailer, the unit tests and the functional tests. In the unit tests, you run the mailer in isolation with tightly controlled inputs and compare the output to a known value (a fixture.) In the functional tests you don't so much test the minute details produced by the mailer; instead, we test that our controllers and models are using the mailer in the right way. You test to prove that the right email was sent at the right time.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.2 Unit Testing\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In order to test that your mailer is working as expected, you can use unit tests to compare the actual results of the mailer with pre-written examples of what should be produced.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.2.1 Revenge of the Fixtures\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For the purposes of unit testing a mailer, fixtures are used to provide an example of how the output 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 should
\i0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0  look. Because these are example emails, and not Active Record data like the other fixtures, they are kept in their own subdirectory apart from the other fixtures. The name of the directory within 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/fixtures
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directly corresponds to the name of the mailer. So, for a mailer named 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserMailer
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 , the fixtures should reside in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/fixtures/user_mailer
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory.\
When you generated your mailer, the generator creates stub fixtures for each of the mailers actions. If you didn't use the generator, you'll have to create those files yourself.\
\pard\pardeftab720\sl420\sa140

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.2.2 The Basic Test Case\
\pard\pardeftab720\sa420

\b0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Here's a unit test to test a mailer named 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserMailer
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  whose action 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 invite
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is used to send an invitation to a friend. It is an adapted version of the base test created by the generator for an 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 invite
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 action.\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserMailerTest < ActionMailer::TestCase\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "invite"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Create the email and store it for further assertions\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0email = UserMailer.create_invite(
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'me@example.com'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ,\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'friend@example.com'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf15 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 Time\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .now)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Send the email, then test that it got queued\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_emails \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 1\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0email.deliver_now\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Test the body of the sent email contains what we expect it to\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal [
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'me@example.com'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ], email.from\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal [
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'friend@example.com'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ], email.to\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'You have been invited by me@example.com'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , email.subject\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal read_fixture(
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'invite'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ).join, email.body.to_s\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the test we send the email and store the returned object in the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 email
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  variable. We then ensure that it was sent (the first assert), then, in the second batch of assertions, we ensure that the email does indeed contain what we expect. The helper 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 read_fixture
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  is used to read in the content from this file.\
Here's the content of the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 invite
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  fixture:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Hi friend@example.com,\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 You have been invited.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 Cheers!\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This is the right time to understand a little more about writing tests for your mailers. The line 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionMailer::Base.delivery_method = :test
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 config/environments/test.rb
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  sets the delivery method to test mode so that email will not actually be delivered (useful to avoid spamming your users while testing) but instead it will be appended to an array (
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionMailer::Base.deliveries
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ).\
\pard\pardeftab720\sa280
\cf2 \cb9 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 The 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionMailer::Base.deliveries
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  array is only reset automatically in 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionMailer::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  and 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionDispatch::IntegrationTest
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  tests. If you want to have a clean slate outside these test cases, you can reset it manually with: 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActionMailer::Base.deliveries.clear
\f0 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 10.3 Functional Testing\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Functional testing for mailers involves more than just checking that the email body, recipients and so forth are correct. In functional mail tests you call the mail deliver methods and check that the appropriate emails have been appended to the delivery list. It is fairly safe to assume that the deliver methods themselves do their job. You are probably more interested in whether your own business logic is sending emails when you expect them to go out. For example, you can check that the invite friend operation is sending an email appropriately:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 UserControllerTest < ActionDispatch::IntegrationTest\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "invite friend"
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_difference 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'ActionMailer::Base.deliveries.size'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , +\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 1\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0post invite_friend_url, params: \{ email: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'friend@example.com'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \}\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0invite_email = ActionMailer::Base.deliveries.last\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 "You have been invited by me@example.com"
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , invite_email.subject\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_equal 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'friend@example.com'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , invite_email.to[\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 0\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ]\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_match(/Hi friend
\f5\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 @example
\f3\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 .com/, invite_email.body.to_s)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 11 Testing Jobs\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Since your custom jobs can be queued at different levels inside your application, you'll need to test both, the jobs themselves (their behavior when they get enqueued) and that other entities correctly enqueue them.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 11.1 A Basic Test Case\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 By default, when you generate a job, an associated test will be generated as well under the 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 test/jobs
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  directory. Here's an example test with a billing job:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 BillingJobTest < ActiveJob::TestCase\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'that account is charged'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0BillingJob.perform_now(account, product)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert account.reload.charged_for?(product)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sa420

\f0 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This test is pretty simple and only asserts that the job get the work done as expected.\
By default, 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ActiveJob::TestCase
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  will set the queue adapter to 
\f2 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 :async
\f0 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  so that your jobs are performed in an async fashion. It will also ensure that all previously performed and enqueued jobs are cleared before any test run so you can safely assume that no jobs have already been executed in the scope of each test.\
\pard\pardeftab720\sl432\sa139

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 11.2 Custom Assertions And Testing Jobs Inside Other Components\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Active Job ships with a bunch of custom assertions that can be used to lessen the verbosity of tests. For a full list of available assertions, see the API documentation for {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveJob/TestHelper.html"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 ActiveJob::TestHelper}}.\
It's a good practice to ensure that your jobs correctly get enqueued or performed wherever you invoke them (e.g. inside your controllers). This is precisely where the custom assertions provided by Active Job are pretty useful. For instance, within a model:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf6 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 require 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'test_helper'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\'a0\
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 class\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ProductTest < ActiveJob::TestCase\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0test 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'billing job scheduling'
\f3\i0 \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0assert_enqueued_with(job: BillingJob) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\'a0\'a0product.charge(account)\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
\pard\pardeftab720\sl617\sa139

\f0\b\fs48 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 12 Additional Testing Resources\
\pard\pardeftab720\sl432\sa139

\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 12.1 Testing Time-Dependent Code\
\pard\pardeftab720\sa420

\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Rails provides built-in helper methods that enable you to assert that your time-sensitive code works as expected.\
Here is an example using the {\field{\*\fldinst{HYPERLINK "http://api.rubyonrails.org/classes/ActiveSupport/Testing/TimeHelpers.html#method-i-travel_to"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 \outl0\strokewidth0 \strokec5 travel_to}} helper:\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11360\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl350

\f3 \cf12 \cb7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # Lets say that a user is eligible for gifting a month after they register.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 user = User.create(name: 
\f4\i \cf10 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 'Gaurish'
\f3\i0 \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , activation_date: Date.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 2004\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 10\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 24\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ))\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_not user.applicable_for_gifting?\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 travel_to Date.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 2004\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 11\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 24\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ) \cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 do\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert_equal Date.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 2004\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 10\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 24\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ), user.activation_date \cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # inside the travel_to block `Date.current` is mocked\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \'a0\'a0assert user.applicable_for_gifting?\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 end\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \
\pard\intbl\itap1\pardeftab720\sl350
\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 assert_equal Date.\cf11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec11 new\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 2004\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 10\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , \cf14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec14 24\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ), user.activation_date \cf12 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec12 # The change was visible only inside the `travel_to` block.\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 \cell \lastrow\row
}